### Importing libraries
library(datasets)
library(caret) # Package for machine learning algorithms

data(dhfr) # Importing dhfr data set

# Check whether data set contains missing values
sum(is.na(dhfr))

set.seed(100) # Reproducibility of the model

# Stratified random split of the data

TrainingIndex <- createDataPartition(dhfr$Y, p=0.8, list = FALSE)
TrainingSet <- dhfr[TrainingIndex,] # Training set
TestingSet <- dhfr[-TrainingIndex,] # Testing set

### Support Vector Machine Model (Polynomial Model)

# Build training model

Model <- train(Y ~ ., data = TrainingSet,
               method = "svmPoly",
               na.action = na.omit,
               preProcess=c("scale","center"),
               trControl= trainControl(method="none"),
               tuneGrid = data.frame(degree=1,scale=1,C=1))

# Build a cross validation model

Model.cv <- train(Y ~ ., data = TrainingSet,
                  method = "svmPoly",
                  na.action = na.omit,
                  preProcess=c("scale","center"),
                  trControl= trainControl(method="cv", number=10),
                  tuneGrid = data.frame(degree=1,scale=1,C=1))

# Apply model for prediction

Model.training <- predict(Model, TrainingSet) # Make prediction on training set
Model.testing <- predict(Model, TestingSet) # Make prediction on testing set
Model.cv <- predict(Model.cv, TrainingSet) # Performs cross validation

# Model performance (Confusion matrix & Statistics)

Model.training.confusion <- confusionMatrix(Model.training, TrainingSet$Y)
Model.testing.confusion <- confusionMatrix(Model.testing, TestingSet$Y)
Model.cv.confusion <- confusionMatrix(Model.cv, TrainingSet$Y)

print(Model.training.confusion)
print(Model.testing.confusion)
print(Model.cv.confusion)

# Feature importance
Importance <- varImp(Model)
plot(Importance, top = 15, col = "red")
